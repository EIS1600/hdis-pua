[["index.html", "HDIS: Analysis of Prosopographical Data–with R Preface", " HDIS: Analysis of Prosopographical Data–with R Maxim G. Romanov 2023-10-23 Preface This is a Handbook for Digital Islamicate Studies. Work in progress, based on courses tought. The current instantiation is a hands-on course that provides a practical introduction to the R programming language for historians with a specific focus on analyzing prosopographical data. The primary dataset that we will explore comes from the “Prosopografía de ulemas de al-Andalus” (PUA) project (https://www.eea.csic.es/pua/), which contains information on Muslim scholars from al-Andalus. The course is designed for those with no prior programming experience but assumes some familiarity with Arabic and Spanish, as the PUA data is primarily in these languages. The language of instruction will be English. "],["about-the-course.html", "About the Course Syllabus", " About the Course The course, “Computational Analysis of Data from Audition Statements–with R”, aims to introduce students to the main methods of data analysis that would be suitable for historical data. Students will learn the basics of the programming language R, which is one of the top choices in the field of Digital Humanities and Digital History. By the end of the course, students will understand how to work with data and how to extract the most valuable insights from it (exploratory data analysis). Students will practice on a dataset created from audition statements from medieval Damascus, thus also gaining original insights into the social history of medieval Islamic learning. There are no prerequisites for this course, except the basic knowledge of Arabic, since the data from audition statements is in Arabic. The course is complimentary to 57-521, where students will be learning how to read the original handwritten audition statements. Syllabus Full nomenclature: [UHH AAI WiSe 23] 57-528 Digital Humanities in African-Asian Studies: Analysis of prosopographical data with programming language “R” Language of instruction: English Hours per week: 2 Credits: 6.0 Meeting time: &lt;…&gt; Additional meeting time: we will need to find a time slot when you can all join and work on your HW assignments together Meeting place: for convenience, all meetings will be held online via Zoom, link: &lt;…&gt;; Course resources: https://eis1600.github.io/hdis-pua/; Meeting link: shared via Slack; other details are available via STiNE Office hours: tbd (on Zoom); if you have any questions, please, post them on Slack Instructor: Dr. Maxim Romanov, maxim.romanov@uni-hamburg.de General Description This hands-on course provides a practical introduction to the R programming language for historians with a specific focus on analyzing prosopographical data. The primary dataset we will explore comes from the “Prosopografía de ulemas de al-Andalus” (PUA) project (https://www.eea.csic.es/pua/), which contains information on Muslim scholars from al-Andalus. The course is designed for those with no prior programming experience but assumes some familiarity with Arabic and Spanish, as the PUA data is primarily in these languages. The language of instruction will be English. Personal computers are required both for in-class work and for your homework. Your computer must run a full version of either Windows, MacOS, or Linux; unfortunately, neither tablets nor Chrome-based laptops are suitable for this course. No prior programming experience is required, but familiarity with the command line and basic principles of programming will be beneficial. Learning objectives Get basic familiarity with the programming language R; Learn basic analytical techniques; Gain an understanding of working with data and modeling data; Practice these skills on a collection of historical data; Didactic concept This is a hands-on practical course, which requires regular attendance and completion of homework assignments. The participants of the course are encouraged to attend weekly “office hours”, where they can work on their homework assignments and get immediate feedback from the instructor. The main didactic approach of the course is to maximize the engagement of the participants with the programming language: this will provide a level of confidence and comfort in dealing with admittedly an alien subject within the scope of African and Asian studies; attaining this level of comfort is the key to absorbing the necessary theoretical, conceptual, and practical knowledge. Upon the completion of assigned tasks, the students are encouraged to bring their own datasets, since the engagement with their own data will provide a better grounding in this new subject. 0.0.1 Main Object of the Course: PUA Dataset In the course we will focus on the data from “Prosopografía de ulemas de al-Andalus” (PUA) (https://www.eea.csic.es/pua/). Below is a slightly reworked description of the project from the official website (should be further reworked): The aim of prosopography is the historical study of a group of people—as defined by a particular feature or common characteristic—through an analysis of their biographical data. Prosopography is not a simple collection of biographies, because, although it is closely related to that literary genre, it is distinct from it because its interest is not focused on the individual, but rather on the group. It analyzes common characteristics and the structure of relationships between the people belonging to that sector of society. In the case of PUA, that group is the ʿulamāʾ (scholars) who lived in al-Andalus during the 2nd–9th centuries AH / 8th–14th centuries CE. ʿUlamāʾ are defined as specialists in Islamic religious knowledge, whose biographies can be found in biographical dictionaries, a characteristic genre of Arabic literature which underwent substantial development during the Middle Ages in al-Andalus. It should be added, however, that the project includes all those persons who have their own entry in biographical dictionaries, even if they cannot be truly be labelled as ʿulamāʾ. These include poets, men of letters and people devoted to “the sciences of the ancient” are also included. The dataset includes: A total of 31,117 biographies belonging to 205 sources have been consulted, which allowed to compile: 11,832 - persons (12,817 records; 985 reference records) 509 nisbaŧs 281 geographic 184 tribal 13 family 31 other type 817 families 848 places 554 in al-Andalus 294 outside of al-Andalus The following is a list of just some of the points for which the prosopographic method may be of use. Reconstructing families: Reconstructing families and research into family relationships between the ulemas, as well as producing genealogical trees, is a task that will be facilitated by having all of the information available in digital format. Bringing together all of these genealogical trees and studying the geographical and tribal origins of all of the families is a fundamental task that still remains to be done. It must also be pointed out that achievements of other partial works (Molina, “Taʾrīj de Ibn al-Faraḍīi”) lead us to think that this is the best method for carrying out a true critical review of the data provided by biographical dictionaries.  Research into the world of knowledge: Master-disciple relationships, establishing transmission networks for the main works and disciplines. This topic is in turn very closely connected to kinship, as the marriage strategies that were established within the group of the ulemas were linked to the transmission of knowledge and to the control of knowledge as a means of power. Local elites: The distribution of these ulemas across different areas allows us to look at which were the main centres of knowledge and to study local elites. Many of these studies have already been carried out using this database, such as the study of the scholarss of Algeciras by Marín y and Fierro. Demographic studies: It is these that can benefit the most from the information being available in a database. Some examples of this are the calculation of the median age at death of the ulemas (studies by Ávila and Zanón), the results of which have shown a very high rate for this group, and other more complex calculations such as working out the age of procreation, for which it is necessary to turn to the study of families and which up to the present has been calculated as 35 years old (Molina). Legal-religious posts: Studying the offices held by the ulemas and their links to political power. It is possible to establish the relationships of people who held a particular office by order of succession, as well as studying the characteristics of a certain office or activity through the minor details that are given for each of the individuals who held it or by looking at the different expressions that are used to refer to it, whether or not they were paid for carrying out their duties, whether they were involved in any other professional activity at the same time, etc. Research into onomastics: Important studies on the onomastic traditions of the Andalusi ulemas have already been carried out (Marín). We hope, however, to be able to research this area in greater depth once the project has progressed further. The main objective of studies on onomastics will be to investigate homonymy, in particular family homonymy, and to reflect on the name Muḥammad in al-Andalus, which has already been the subject of research (Granja). The PUA Project Team: scientific team: María Luisa Ávila (Coordinator), Scientific Researcher CSIC Luis Molina, Scientific Researcher CSIC Mayte Penelas, Tenured Scientist CSIC María López Fernández, Research assistant CSIC the detailed list of other contributors can be found at: https://www.eea.csic.es/pua/info/otroscolaboradores.php. web design and programming: Carlos Bueno, telecom engineer, graphic designer (design, programming and data structures); Ángel Isidro Vega Zafra , Technical Engineer in Computer Systems – Web developer; Detailed description of the project: https://www.eea.csic.es/pua/info/proyecto.php (available in English and Spanish). A note on prosopography as a method: Prosopography is a research method used in history and social sciences to study the collective biography of a specific group of people, such as a social class, a profession, or a community, through the analysis of their social, political, economic, and cultural interactions. The term “prosopography” comes from the Greek words “prosopon” (meaning “person”) and “graphein” (meaning “to write”), and was first used in the 19th century to describe a method of identifying and describing individuals mentioned in historical documents. In practice, prosopography involves collecting and analyzing data from a variety of sources, such as official records, archives, and correspondence, in order to construct a database of biographical information about the individuals in the group being studied. This can include information such as their occupation, social status, family connections, religious affiliations, and political activities. By analyzing this biographical data, scholars can gain insights into the social, political, and cultural dynamics of the group being studied, as well as broader historical and cultural trends. Prosopography is a useful method for understanding the lives and experiences of people who may have been overlooked by traditional historical narratives, and for identifying patterns and trends that may not be apparent through other methods of analysis. 0.0.1.1 Course structure and learning objectives: Introduction to R programming language: learn the basics of R, including syntax, data types, and core functions. Data manipulation and analysis: understand how to clean, transform, and analyze data using R. Visualization techniques: Create chronological graphs, cartograms, and network diagrams to visually represent the data. Working with prosopographical data: apply learned techniques to the PUA dataset, focusing on the analysis of Muslim scholars from al-Andalus. Independent research: Encourage students to bring their own datasets for analysis and receive guidance from the instructor. By the end of the course, students will have a foundational understanding of R programming, basic data analysis techniques, and experience working with prosopographical data. They will be better equipped to tackle research questions in African and Asian studies using computational methods. Literature All the necessary study materials will be provided. Below you can find a list of additional materials. Course Evaluation: requirements for the full credit mandatory attendance and participation; timely homework assignments; final project (computational analysis + analytical commentary); no examination; Final projects can be prepared either individually or in groups. Class Participation Each class session will consist in large part of practical hands-on exercises led by the instructor. Personal computers are required. We can accommodate whatever operating system you use (Windows, Mac, Linux), but it should be a full computer/laptop, not a tablet that uses an “incomplete” version of any major operating system. Don’t forget that asking for help counts as participation! Homework Just as in research and real life, collaboration is a very good way to learn and is therefore encouraged. If you need help with any assignment, you are welcome to ask a fellow student. If you do work together on homework assignments, then when you submit it please include a brief note (just a sentence or two) to indicate who did what. NB: On submitting homework, see below. Final Project Final project will be discussed later. You will have an option to build on what we will be doing in class, but you are most encouraged to pick a topic of your own. The best option will be to work on something relevant to your field of study, your term paper or your thesis. Additional Study Materials Arnold, Taylor, and Lauren Tilton. Humanities Data in R. New York, NY: Springer Science+Business Media, 2015 (shared via Slack) Healy, Kieran. Data Visualization: A Practical Guide. Princeton University Press, 2018. ISBN: 978-0691181622. http://socviz.co/ Hadley Wickham &amp; Garrett Grolemund, R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly, 2017. ISBN: 978-1491910399. https://r4ds.had.co.nz/ Wickham, Hadley. Advanced R, Second Edition. 2 edition. Boca Raton: Chapman and Hall/CRC, 2019. http://adv-r.had.co.nz/ Also check https://bookdown.org/ for more books on R Coding Club R Tutorials (focus on Ecology and Environmental Sciences), https://ourcodingclub.github.io/tutorials.html NB: By the way, this website is also built with R. Check: Yihui Xie. bookdown: Authoring Books and Technical Documents with R Markdown, 2022 https://bookdown.org/yihui/bookdown/ Software, Tools, &amp; Technologies: The following is the list of software, applications and packages that we will be using in the course. Make sure to have them installed by the class when we are supposed to use them. The main tools for the course will be the programming language R and RStudio, the premier integrated development environment for R. R: https://cloud.r-project.org/ (choose the version for your operating system!) RStudio: https://rstudio.com/products/rstudio/download/ (RStudio Desktop, Open Source License — the free version) We will also use a variety of packages for R, which we will be installing when necessary. Submitting Homework: Homework assignments are to be submitted by the beginning of the next class; For the first few classes you must email them to the instructor (as attachments) In the subject of your email, please, use the following format: CourseAPPREVIATION-LessonID-HW-Lastname-matriculationNumber, for example, if I were to submit homework for the first lesson, my subject header would look like: CADAS-L01-HW-Romanov-12435687. DH is a collaborative field, so you are most welcome to work on your homework assignments in groups, however, you must still submit it. That is, if a groups of three works on one assignment, there must be three separate submissions: either emailed from each member’s email and published at each member’s github page. Schedule Location: Online 01 Fri, 20. Oct. 2023 16:00-18:00 02 Fri, 27. Oct. 2023 16:00-18:00 03 Fri, 03. Nov. 2023 16:00-18:00 04 Fri, 10. Nov. 2023 16:00-18:00 05 Fri, 17. Nov. 2023 16:00-18:00 06 Fri, 24. Nov. 2023 16:00-18:00 (*) 07 Fri, 01. Dec. 2023 16:00-18:00 08 Fri, 08. Dec. 2023 16:00-18:00 (*) 09 Fri, 15. Dec. 2023 16:00-18:00 (*) 10 Fri, 22. Dec. 2023 16:00-18:00 11 Fri, 12. Jan. 2024 16:00-18:00 12 Fri, 19. Jan. 2024 16:00-18:00 13 Fri, 26. Jan. 2024 16:00-18:00 14 Fri, 02. Feb. 2024 16:00-18:00 Lesson Topics (subject to modifications) [ #01 ] Introduction; Syllabus; Setting Everything Up; [ #02 ] Part I—Basics: RStudio, Basic R Commands, Swirl Tutorials [ #03 ] Part I—Basics: R Markdown and R Notebooks [ #04 ] Part I—Basics: Control Flow; Regular Expressions; [ #05 ] Part I—Basics: Data Manipulations; [ #06 ] Part I—Basics: Visualizations with plot() and ggplot(); [ #07 ] Part I—Basics: Tidying Data; [ #08 ] Part II—Analyses: Audition Statement Data; [ #09 ] Part II—Analyses: Audition Statement Data; [ #10 ] Part II—Analyses: Audition Statement Data; [ #11 ] Part II—Analyses: Audition Statement Data; [ #12 ] Part II—Analyses: Audition Statement Data; [ #13 ] Part II—Analyses: Audition Statement Data; [ #14 ] Part II—Analyses: Audition Statement Data; "],["class-01.-setting-everything-up.html", "1 Class 01. Setting Everything Up 1.1 Links for things to install 1.2 Setting Things Up 1.3 Creating a Project 1.4 Homework assignments", " 1 Class 01. Setting Everything Up [subject to updates and corrections] 1.1 Links for things to install https://cloud.r-project.org/ :: R is the programming language that we will be using; https://posit.co/downloads/ :: RStudio is an integrated development environment (IDE) for R (In other words, a convenient interface that makes it easier to code in R.) https://learnr-examples.shinyapps.io/ex-setup-r/ :: an interactive tutorial on how to install everything, with useful additional explanations. 1.2 Setting Things Up Important, like really-super-duper-important!!!: We will need to set everything up so that it is much easier during the course. Creating folders and subfolders it is crucially important that you create them the exact way it is described below: 1) use only small letters; 2) instead of spaces between words, use “_” (underscore). It is important that you set things up exactly like that. If you make mistakes in naming folders correctly, code that we will be using will most likely not work, because it will not be able to find files that it needs to load and/or save. Setting up our main folder: CADAS-R Create that folder in “Documents” (one of the default folders both on Mac and Windows); or anywhere else—ideally where you keep all your other folders related to other courses that you are taking; just remember where you create it; In your folder then create the following structure: CADAS-R/ ├── downloads/ ├── data/ │ ├── raw_data/ │ └── processed_pata/ ├── literature/ │ ├── articles/ │ └── books/ ├── classes/ │ ├── class_01/ │ ├── class_02/ │ └── class_03/ ├── pPresentations/ └── meeting_notes/ /downloads/ here we will store all the course-related files that you will be downloading; /data/ here we will keep files with our data; we will not really need /raw_data/ and /processed_data/, but, usually, in your own future projects you may want to have such a division, to keep the original data in one folder and data that you have processed (cleaned, updated, etc.) in a different folder; /literature/ This is a way to organize readings, relevant to your project; we will keep here relevant files; Using bibliography managers, like Zotero, is a better option though; Download the following books, and place them in your folder (these are mainly for your reference): https://www.dropbox.com/s/n1vp6ix87js0j5k/ArnoldHumanities2015.pdf?dl=0 https://www.dropbox.com/s/zfryoznbkogqssg/HadleyAdvanced2014.pdf?dl=0 https://www.dropbox.com/s/kh18de2cym65gfi/HadleyGgplot22016.pdf?dl=0 Note, how the names of PDFs are following the same pattern: AuthorTitleYEAR.pdf. /classes/ here we will be placing files relevant to specific classes; mainly, these folders will keep the scripts that you will be working on; /presentations/ A folder for your final presentation/project; /meeting_notes/ You may want to store your notes separately; 1.3 Creating a Project now that you have created everything, you need to create what is called a “Project” in RStudio. This will create a single file, which you can open in order to load all the necessary settings relevant to our course. using “Projects” will help you to keep different research tasks separately and, most importantly, keep all the files relevant to specific tasks well-organized. So, how to create a project? open RStudio, then, in the main menu, choose: File &gt; New Project (you should then see “New Project Wizard”, as shown below); Select “Existing Directory” &gt; then click on “Browse”, and then select the folder “CADAS-R”, which you created in the first step; click “Create Project” to complete the process. Now, what will happen is that in the tab “Files” in the lower right part of RStudio you will see the contents of the folder “CADAS-R”. There will also be a new file, called CADAS-R.Rproj. Later on, you will be able to quickly open your project by double-clicking on that file. When you open the project, R automatically sets the working directory (setwd()) to the folder of the project and many things just become much easier. Now, you can add and create new files relevant to your project in the folder “CADAS-R” and they will be easy to find directly from RStudio, using its “Files” Tab, which is usually available in the lower right corner. Suggestion: you will benefit greatly from keeping some order in your project folder. For example, keep all the files that you download in a subfolder “downloads”; your your data files in a subfolder “data”, and so on. 1.4 Homework assignments Homework (Links will take you to tutorials): http://programminghistorian.org/ is a great resource for learning the basics of practical digital humanities. I encourage you to browse the lessons carefully, just to get a sense of what you can learn to do: http://programminghistorian.org/en/lessons/. Please, read the following assigned lessons carefully. In some cases, it is well worth trying to repeat all the steps on your own computer. I will mark those. Data organization: understanding and applying basic principles of data organization will save you a lot of time in the future and will help you to keep your data well organized and easily accessible. James Baker, “Preserving Your Research Data,” Programming Historian 3 (2014), https://doi.org/10.46430/phen0039. Command Line is the most foundational tool for anyone interested in doing anything remotely interesting with computers. Unlike graphical-user-interfaces (GIU), here you give commands to the computer by typing them in directly. You will need one of the following two tutorials, depending on whether you use Mac or Windows. You should try to repeat at least some of the commands given in tutorials. These tutorials are a little bit more detailed than what you will need for now; the most important thing for you to understand is how to navigate your computer (i.s., move from one folder to another), copy and move files, create folders, etc. Mac. Ian Milligan and James Baker, “Introduction to the Bash Command Line,” Programming Historian 3 (2014), https://doi.org/10.46430/phen0037 Windows. Ted Dawson, “Introduction to the Windows Command Line with PowerShell,” Programming Historian 5 (2016), https://doi.org/10.46430/phen0054 "],["class-02-rstudio-basic-r-commands-swirl-tutorials.html", "2 Class 02: RStudio, Basic R Commands, Swirl Tutorials 2.1 Last Class Review 2.2 This Class 2.3 Overview of R 2.4 RStudio Interface 2.5 Main File Types 2.6 Projects 2.7 Basic Commands 2.8 Built-in Functions 2.9 Libraries/Packages 2.10 Values and their types 2.11 Basic Data Structures and Their Practical Usage 2.12 Homework with swirl()", " 2 Class 02: RStudio, Basic R Commands, Swirl Tutorials [subject to updates and corrections] 2.1 Last Class Review syllabus, course requirements; software: R and RStudio—must be installed by now; 2.2 This Class Overview of R RStudio and its interface; Describe the RStudio interface and its main components (Console, Script Editor, Environment, and Plots/Packages/Help); Explain the benefits of using RStudio for R programming; File types and projects; Basic operators and commands; Built-in functions and libraries; Basic data structures and when they are used; swirl() tutorials as homework assignments; 2.3 Overview of R R, its features, and its relevance to historians; R as an open-source programming language and its community; Comprehensive R Archive Network (CRAN); 2.4 RStudio Interface RStudio interface and its main components (Console, Script Editor, Environment, and Plots/Packages/Help) The benefits of using RStudio for R programming Rstudio Interface top-left: Open Scripts and Files: this is where you will be working with your R scripts; bottom-left: R console: this is where you can run R code (without committing it to a script; very handy for quickly testing something); Terminal: skipping for now top-right: Environment: all active variables are listed here; you can also load data through the “Import Dataset” dialog from here; this tab is useful to keep track of what is loaded into your current state of R; History: here you will find the complete list of commands that you have run already; plus, some other tabs which are not too relevant for now; bottom-right: Files: this is your file browser, which is useful when you work with projects; Plots: all your temporary plots will be appearing here; Packages: this is the list of all installed and loaded packages (not the most important tab); Help: whenever you invoke help, details will be shown here; Viewer: this tab will be showing the results of HTML output; most useful for working with notebooks (next class); plus, some other tabs which are not too relevant for now; for a video explanation: https://www.youtube.com/watch?v=XdgfhqNtje4 2.5 Main File Types main file types: R script, R notebook, and R markdown; R script: contains only R code and comments; most useful for “silent” processing of data and time-consuming analyses that are best run from command line; R notebook (R markdown): allows one to combine executable R code and academic prose; with this format one can create documents that can be regenerated when data is updated scenario: you describe some statistical data—on population, for example; in a year or two you get an updated file; your old descriptions may still be true—overall population, distribution of population over years, etc., but the data changed; you can simply regenerate your notebook with new data and all the numbers and graphs will be updated. you can create them from: File &gt; New File or the icon with green plus (top left corner); for now, we will try an R script; next class we will start with R notebooks; 2.6 Projects RStudio projects make it straightforward to divide your work into multiple contexts, each with their own working directory, workspace, history, and source documents. Creating our project: File &gt; New Project Existing Directory choose the directory for the course that we created last time: CADAS-R (we agreed that you create it in your “Documents” folder—both Mac ands Windows have such a folder) click Create Project Using your Project: you now can open RStudio by clicking on the CADAS-R.Rproj file in your course folder; this will automatically adjust RStudio settings to that folder in Files (bottom-right corner) you will automatically see the folder of your project; you can now use paths relative to your project’s folder: review: what are relative and absolute paths? Closing your Project: If you did any work with your project and then want to close it, RStudio will ask you if you want to Save workspace image to ..., click Do not save; while saving may be useful occasionally, in most cases that creates a large temporary file which makes your Rstudio slower. 2.7 Basic Commands let’s create an R script file in classes/class_02/ and call it class_02.R here is some little filler for our script. Simply copy-paste it into the new script. # arithmetic operations 3 + 5 3 - 5 3 / 5 3 * 5 # assignment: `&lt;-` or `=`; x &lt;- 3 + 5 x x * 5 x - 5 y &lt;- 3 * 5 y + x z &lt;- y + x # = Vs == x == y x = y x == y now we can try basic R operations: we can write them in our R script (top-left part of RStudio interface); we can also run them directly in Console (bottom-left part of RStudio interface); the main differences are: we can save all our commands in R script, but we cannot do that in console; console, however, is very useful for running commands that we do not want to save (for example, using help commands) R script is most useful when we want to do something complex and we need a series of commands that must run in a specific order; this will be the main use of R scripts (as well as R notebooks); In R script you can execute all commands one after another (as they appear in the script); in console you can execute only one command at a time; basic arithmetic operations: +, -, *, /; let’s try some examples from what we pasted into our script; values and variables: values: when we simply typed our commands as we just did we use values, but they are gone as soon as we type the next one; variables allow us to preserve results for later reuse; variables: assignment operator (&lt;- or =) and variable assignment; difference between = and ==; comments: we can use # in front of any line to turn it into a comment; comment means that R will not try to execute it. 2.8 Built-in Functions Let’s add the following few lines to the end of our R script: # built-in functions numbers &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9) max(numbers) min(numbers) mean(numbers) sum(numbers) R comes with some built-in functions, which have this format: function(arguments) functions usually pack a few steps that transform and manipulate supplied data (argument) and return the result of those manipulations; in the code we created a vector (I will explain in a moment what vector is) names numbers we can try some of the built-in functions and use this variable as an argument. What do you think the following functions will do? max() :: ? min() :: ? mean() :: ? sum() :: ? functions may take/require a different number of arguments; arguments may be data that you supply and/or some parameters that trigger a specific behavior of a function; in order to find out how a specific function works—and what arguments it takes, you can use help function or operator. For example, if we want to get help for the function mean(), we can do the following (type and execute): ?mean (or ??mean — this will give broader results); help(mean); Thus, help tells us that mean() can take the following arguments: mean(x, trim = 0, na.rm = FALSE, ...) Alternatively, you can always google how to do a certain thing in R… 2.9 Libraries/Packages The concept of R packages and their role in extending R’s functionality; you can think of packages as additional programs for R (like MS Word on your computers that gives you a useful tool for writing your papers); packages give you access to more functions; Packages can be installed: using the install.packages() function (the name of the library should be in quotation marks); let’s install ggplot2 with this command; let’s also install stringi with this command; using interface: Tools &gt; Install Packages let’s install tidyverse via the interface; let’s also install library swirl :: you will need it for your homework; Packages can be loaded using function library() (or require()); library(ggplot2) library(tidyverse) library(stringi) Alternatively, you can call specific functions directly from specific libraries: stringi::stri_rand_lipsum(2) :: try this example; this way is sometimes necessary when there are functions with the same name in different loaded packages; you can try to run the following line of code to generate a graph: ggplot2::ggplot(mtcars) + ggplot2::geom_point(ggplot2::aes(x = mpg, y = hp)) this code becomes simple, if you have loaded the library ggplot2 in advance: ggplot(mtcars) + geom_point(aes(x = mpg, y = hp)) 2.10 Values and their types There are several main types of values in R (these are the most important ones): numeric: 3 or 3,14 character: character or \"3.14\" logical: TRUE or FALSE You can check the type of value by using class() function, suppling the value or the variable as an argument. You can convert between types: as.numeric() to convert to numeric; you will not be able to convert to numeric a vector that contains letter characters; as.character() to convert to character; any vector can be converted to character; There are some other types, which we will cover when they become relevant. 2.11 Basic Data Structures and Their Practical Usage One can say that everything in R revolves around vectors and vector algebra. This is not as scary as it may sound, but it has an extremely profound effect on how everything is done in R. A vector is a fundamental data structure that represents a one-dimensional array containing elements of the same data type. Vectors are used to store and manipulate collections of values, such as numbers, characters, or logical values. They are the basic building blocks for more complex data structures like matrices, data frames, and lists. Unless there is evidence to the opposite, you can assume that a variable/value is a vector. All operations in R work like vector operations, which makes R effective, efficient, and quite elegant. Vectors in R are versatile and can be used to perform various operations, such as element-wise arithmetic, comparisons, and aggregations. R has a rich set of built-in functions for working with vectors, which makes it a powerful language for data manipulation and analysis. Keep in mind that the elements of a vector must be of the same type. If you try to combine different types of elements in a vector, R will attempt to coerce the elements to a common type, following a hierarchy of types (logical &lt; integer &lt; double &lt; character). For example, if you combine numeric and character values in a vector, R will convert the numeric values to character values. If you need to store elements of different types, you can use a list, which is a more flexible data structure in R. 2.11.1 Basic data structures vectors; matrices; dataframes/tibbles; lists; 2.11.2 Main properties of basic data structures single dimension (x axis): vectors: each vector is a vector a vector can hold data of only one type! two-dimensions (x-axis: rows, y-axis: columns): matrices: a vector folded into two dimensions; (each element can be accessed as if it were a vector - 1dim coordinates, or as if it were a matrix – 2dim coordinates;) like a vector, a matrix can only hold data of one type! dataframes / tibbles; columns and rows, where each column is a vector (i.e., must be the same type); heterogeneous: lists: anything can be an item in a list; 2.11.3 Most Common Usage of Basic Data Structures: storing data: most commonly, data frames / tibbles are used for storing data; you will load data into R in a form of a data frame and then you will start your analyses; calculations (modifications, alterations, updates, etc.): these are most commonly performed on vectors, or, most commonly, columns of data frames or, in case of matrices, on complete matrices or their columns or rows. Matrices are used almost exclusively for complex calculations (for example, we can use them for identifying groups of individuals with similar characteristics). export of data from complex functions: list are very convenient to return results of complex functions, since they can hold any types of data structures in a single object; we are not going to use them much (if at all); they become useful after you reach a certain level of complexity in your work with R; 2.11.4 Basic Data Structures Examples 2.11.4.1 Vectors In R, a vector is a one-dimensional array that can store a collection of values of the same type. You can create a vector using the c() function, which combines multiple values into a single vector. Here’s an example of vectors. (Check what happens with mixed_vector). numeric_vector &lt;- c(10, 20, 30, 40, 50) character_vector &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;date&quot;, &quot;fig&quot;) mixed_vector &lt;- c(10, 20, 30, 40, 50, &quot;banana&quot;) Print out: [1] 10 20 30 40 50 [1] &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot; &quot;date&quot; &quot;fig&quot; [1] &quot;10&quot; &quot;20&quot; &quot;30&quot; &quot;40&quot; &quot;50&quot; &quot;banana&quot; 2.11.4.2 Matrices In R, a matrix is a two-dimensional array that can store a collection of values of the same type, organized in rows and columns. You can create a matrix using the matrix() function. Here’s an example of a numeric matrix: numeric_matrix &lt;- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3) Print out: [,1] [,2] [,3] [1,] 1 3 5 [2,] 2 4 6 2.11.4.3 Data.frames/tibbles A data frame is a table-like data structure in R, where each column can contain different types of data, and rows represent observations. A tibble (short for “tidy data frame”) is a modern version of a data frame, introduced by the tidyverse package collection, which offers some improvements over the traditional data frame, such as better printing and subsetting. # Load required libraries library(dplyr) library(tibble) # Define the data names &lt;- c(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;) ages &lt;- c(25, 30, 22) gender &lt;- c(&quot;F&quot;, &quot;M&quot;, &quot;M&quot;) # Create the data frame my_dataframe &lt;- data.frame(Name = names, Age = ages, Gender = gender) # Create the tibble my_tibble &lt;- tibble(Name = names, Age = ages, Gender = gender) Print out for data.frame: Name Age Gender 1 Alice 25 F 2 Bob 30 M 3 Charlie 22 M Print out for tibble: # A tibble: 3 × 3 Name Age Gender &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; 1 Alice 25 F 2 Bob 30 M 3 Charlie 22 M 2.11.4.4 Lists In R, a list is a versatile data structure that can store a collection of values, where each element can be of a different type or even another data structure like a vector, matrix, or another list. You can create a list using the list() function. Here’s an example of a list: # Define the data names &lt;- c(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;) matrix_data &lt;- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3) sublist &lt;- list(temperature = 72, weather = &quot;sunny&quot;) # Create the list my_list &lt;- list(Names = names, Data = matrix_data, Sublist = sublist) Print out: $Names [1] &quot;Alice&quot; &quot;Bob&quot; &quot;Charlie&quot; $Data [,1] [,2] [,3] [1,] 1 3 5 [2,] 2 4 6 $Sublist $Sublist$temperature [1] 72 $Sublist$weather [1] &quot;sunny&quot; 2.11.4.5 RDS Files They provide a convenient and efficient way to save and load R objects such as vectors, matrices, data frames, lists, and models. RDS files use a compact representation, which makes them smaller in size and faster to read and write compared to text-based file formats like CSV or TSV. You can save an R object to an RDS file using the saveRDS() function and load an R object from an RDS file using the readRDS() function. RDS files are particularly useful when working with large datasets or complex objects, as they allow for fast and efficient storage and retrieval. However, keep in mind that RDS files are specific to R and may not be compatible with other programming languages or software without additional conversion. Summary: quick and small, because they are binary; very handy, because one can use the same command to save/load any data structure; 2.12 Homework with swirl() Homework assignment: Swirl Course Tutorials; Swirl Course: R Programing(you will be asked to install it in the beginning); other course can be installed with install_course(\"name of the course\") (perhaps, the only relevant to us course will be “Exploratory Data Analysis”); Swirl: start the R Programming course; Swirl tutorials to complete: for Lesson 02: Basic Building Blocks; Workspace and Files; Sequences of Numbers; Vectors; for Lesson 03: Missing Values; Subsetting Vectors; Matrices and Dataframes; Logic; Swirl commands: library(swirl) to load the library; then type swirl() to start it; your main course is R Programming start it and complete the assigned modules; in the middle of the lesson, you can use play() to go into a free mode, if you need to check something in R; type nxt() to return to the lesson; Swirl Additional Courses: http://swirlstats.com/scn/title.html there are some more courses, with quite a few in German and Spanish; recommend you to try for practice; Swirl assignment submission: when you reach the end of the course, choose yes if you want to receive credit; type in your email; type in XXXXX for your Corsera.org token; then, you will get an error; do not worry, I want you to take a screenshot of this screen and email it to me as your confirmation; (take a screenshot of either your entire screen, or of the entire RStudio screen). in the topic of our email, use the format described in the syllabus; please, send one email per module, that is to say, you will need to send me 4 emails by the next class; I recommend you to do these whenever you have time; it is best to do them not in one go, but rather take breaks between them; "],["class-03.html", "3 Class 03", " 3 Class 03 [subject to updates and corrections] "],["class-04.html", "4 Class 04", " 4 Class 04 [subject to updates and corrections] "],["class-05.html", "5 Class 05", " 5 Class 05 [subject to updates and corrections] "],["class-06.html", "6 Class 06", " 6 Class 06 [subject to updates and corrections] "],["class-07.html", "7 Class 07", " 7 Class 07 [subject to updates and corrections] "],["class-08.html", "8 Class 08", " 8 Class 08 [subject to updates and corrections] "],["class-09.html", "9 Class 09", " 9 Class 09 [subject to updates and corrections] "],["class-10.html", "10 Class 10", " 10 Class 10 [subject to updates and corrections] "],["class-11.html", "11 Class 11", " 11 Class 11 [subject to updates and corrections] "],["class-12.html", "12 Class 12", " 12 Class 12 [subject to updates and corrections] "],["class-13.html", "13 Class 13", " 13 Class 13 [subject to updates and corrections] "],["class-14.html", "14 Class 14", " 14 Class 14 [subject to updates and corrections] "],["glossary-of-computer-terms.html", "Glossary of Computer Terms 14.1 General Computer Terms 14.2 R-Specific Terms 14.3 NLP and Linguistics 14.4 Machine Learning", " Glossary of Computer Terms NB: The idea is to create a detailed glossary in multiple languages to facilitate understanding. Languages: English, German, Arabic, Persian, Turkish, etc. Entries may be supplied by illustration for more efficiency and clarity. 14.1 General Computer Terms file manager: a software application that provides a user interface to manage files and directories. German: Dateimanager; Arabic: مدير الملفات (Mudīr al-mulafāt); Persian: مدیر پرونده (Modir-e Parvandeh); command line: A text-based interface where users input commands to control the computer. German: Befehlszeile; Arabic: سطر الأوامر (satr al-awamir); Persian: خط فرمان (xatt-e farman); path: a reference to a specific location in a file system, typically consisting of a sequence of directories leading to a specific file or directory. German: Pfad; Arabic: مسار (masar); Persian: مسیر (masir); folder: a virtual container within a file system used to store and organize files and other folders. German: Ordner; Arabic: مجلد (majallad); Persian: پوشه (poshe); file: A digital container for storing data or information on a computer system. German: Datei; Arabic: ملف (malaf); Persian: فایل (file); 14.2 R-Specific Terms … 14.3 NLP and Linguistics natural language processing (NLP): The branch of artificial intelligence focused on enabling computers to understand, interpret, and generate human language. German: Natürliche Sprachverarbeitung; Arabic: معالجة اللغة الطبيعية (mu‘ālajat al-lughah al-ṭabī‘īyah); Persian: پردازش زبان طبیعی (pardazesh-e zabān-e tabi’i); ngram: A contiguous sequence of n items (such as letters, words, or symbols) from a given sample of text or speech. German: N-Gramm; Arabic: ن-جرام (n-gram); Persian: ن-گرام (n-gram); token: A sequence of characters in text that represents a unit of meaning, often corresponding to a word or a symbol. German: Token; Arabic: رمز (ramz); Persian: توکن (token); corpus: A large and structured set of texts, often used for linguistic research and natural language processing tasks. German: Korpus; Arabic: مدونة (madwana); Persian: متن‌نگار (matn-negar); corpus linguistics: The study of language based on large collections of “real life” language use stored in corpora. German: Korpuslinguistik; Arabic: علم اللغة المدوني (’ilm al-lughah al-madwani); Persian: زبان‌شناسی متنی (zabān-shenāsi-ye matni); computational linguistics: An interdisciplinary field concerned with the computational aspects of the human language capacity and the application of computational methods to linguistic questions. German: Computerlinguistik; Arabic: اللسانيات الحاسوبية (al-lisāniyāt al-ḥāsūbīyah); Persian: زبان‌شناسی محاسباتی (zabān-shenāsi-ye moḥāsebatī); 14.4 Machine Learning machine learning deep learning optical character recognition (OCR) handwritten tet recognition (HTR) training a model artificial intelligence "],["appendices.html", "Appendices", " Appendices … "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
